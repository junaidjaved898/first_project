{"ast":null,"code":"/*!\r\n * jQuery Migrate - v3.0.0 - 2016-06-09\r\n * Copyright jQuery Foundation and other contributors\r\n */\n(function (jQuery, window) {\n  \"use strict\";\n\n  jQuery.migrateVersion = \"3.0.0\";\n\n  (function () {\n    // Support: IE9 only\n    // IE9 only creates console object when dev tools are first opened\n    // Also, avoid Function#bind here to simplify PhantomJS usage\n    var log = window.console && window.console.log && function () {\n      window.console.log.apply(window.console, arguments);\n    },\n        rbadVersions = /^[12]\\./;\n\n    if (!log) {\n      return;\n    } // Need jQuery 3.0.0+ and no older Migrate loaded\n\n\n    if (!jQuery || rbadVersions.test(jQuery.fn.jquery)) {\n      log(\"JQMIGRATE: jQuery 3.0.0+ REQUIRED\");\n    }\n\n    if (jQuery.migrateWarnings) {\n      log(\"JQMIGRATE: Migrate plugin loaded multiple times\");\n    } // Show a message on the console so devs know we're active\n\n\n    log(\"JQMIGRATE: Migrate is installed\" + (jQuery.migrateMute ? \"\" : \" with logging active\") + \", version \" + jQuery.migrateVersion);\n  })();\n\n  var warnedAbout = {}; // List of warnings already given; public read only\n\n  jQuery.migrateWarnings = []; // Set to false to disable traces that appear with warnings\n\n  if (jQuery.migrateTrace === undefined) {\n    jQuery.migrateTrace = true;\n  } // Forget any warnings we've already given; public\n\n\n  jQuery.migrateReset = function () {\n    warnedAbout = {};\n    jQuery.migrateWarnings.length = 0;\n  };\n\n  function migrateWarn(msg) {\n    var console = window.console;\n\n    if (!warnedAbout[msg]) {\n      warnedAbout[msg] = true;\n      jQuery.migrateWarnings.push(msg);\n\n      if (console && console.warn && !jQuery.migrateMute) {\n        console.warn(\"JQMIGRATE: \" + msg);\n\n        if (jQuery.migrateTrace && console.trace) {\n          console.trace();\n        }\n      }\n    }\n  }\n\n  function migrateWarnProp(obj, prop, value, msg) {\n    Object.defineProperty(obj, prop, {\n      configurable: true,\n      enumerable: true,\n      get: function get() {\n        migrateWarn(msg);\n        return value;\n      }\n    });\n  }\n\n  if (document.compatMode === \"BackCompat\") {\n    // JQuery has never supported or tested Quirks Mode\n    migrateWarn(\"jQuery is not compatible with Quirks Mode\");\n  }\n\n  var oldInit = jQuery.fn.init,\n      oldIsNumeric = jQuery.isNumeric,\n      oldFind = jQuery.find,\n      rattrHashTest = /\\[(\\s*[-\\w]+\\s*)([~|^$*]?=)\\s*([-\\w#]*?#[-\\w#]*)\\s*\\]/,\n      rattrHashGlob = /\\[(\\s*[-\\w]+\\s*)([~|^$*]?=)\\s*([-\\w#]*?#[-\\w#]*)\\s*\\]/g;\n\n  jQuery.fn.init = function (arg1) {\n    var args = Array.prototype.slice.call(arguments);\n\n    if (typeof arg1 === \"string\" && arg1 === \"#\") {\n      // JQuery( \"#\" ) is a bogus ID selector, but it returned an empty set before jQuery 3.0\n      migrateWarn(\"jQuery( '#' ) is not a valid selector\");\n      args[0] = [];\n    }\n\n    return oldInit.apply(this, args);\n  };\n\n  jQuery.fn.init.prototype = jQuery.fn;\n\n  jQuery.find = function (selector) {\n    var args = Array.prototype.slice.call(arguments); // Support: PhantomJS 1.x\n    // String#match fails to match when used with a //g RegExp, only on some strings\n\n    if (typeof selector === \"string\" && rattrHashTest.test(selector)) {\n      // The nonstandard and undocumented unquoted-hash was removed in jQuery 1.12.0\n      // First see if qS thinks it's a valid selector, if so avoid a false positive\n      try {\n        document.querySelector(selector);\n      } catch (err1) {\n        // Didn't *look* valid to qSA, warn and try quoting what we think is the value\n        selector = selector.replace(rattrHashGlob, function (_, attr, op, value) {\n          return \"[\" + attr + op + \"\\\"\" + value + \"\\\"]\";\n        }); // If the regexp *may* have created an invalid selector, don't update it\n        // Note that there may be false alarms if selector uses jQuery extensions\n\n        try {\n          document.querySelector(selector);\n          migrateWarn(\"Attribute selector with '#' must be quoted: \" + args[0]);\n          args[0] = selector;\n        } catch (err2) {\n          migrateWarn(\"Attribute selector with '#' was not fixed: \" + args[0]);\n        }\n      }\n    }\n\n    return oldFind.apply(this, args);\n  }; // Copy properties attached to original jQuery.find method (e.g. .attr, .isXML)\n\n\n  var findProp;\n\n  for (findProp in oldFind) {\n    if (Object.prototype.hasOwnProperty.call(oldFind, findProp)) {\n      jQuery.find[findProp] = oldFind[findProp];\n    }\n  } // The number of elements contained in the matched element set\n\n\n  jQuery.fn.size = function () {\n    migrateWarn(\"jQuery.fn.size() is deprecated; use the .length property\");\n    return this.length;\n  };\n\n  jQuery.parseJSON = function () {\n    migrateWarn(\"jQuery.parseJSON is deprecated; use JSON.parse\");\n    return JSON.parse.apply(null, arguments);\n  };\n\n  jQuery.isNumeric = function (val) {\n    // The jQuery 2.2.3 implementation of isNumeric\n    function isNumeric2(obj) {\n      var realStringObj = obj && obj.toString();\n      return !jQuery.isArray(obj) && realStringObj - parseFloat(realStringObj) + 1 >= 0;\n    }\n\n    var newValue = oldIsNumeric(val),\n        oldValue = isNumeric2(val);\n\n    if (newValue !== oldValue) {\n      migrateWarn(\"jQuery.isNumeric() should not be called on constructed objects\");\n    }\n\n    return oldValue;\n  };\n\n  migrateWarnProp(jQuery, \"unique\", jQuery.uniqueSort, \"jQuery.unique is deprecated, use jQuery.uniqueSort\"); // Now jQuery.expr.pseudos is the standard incantation\n\n  migrateWarnProp(jQuery.expr, \"filters\", jQuery.expr.pseudos, \"jQuery.expr.filters is now jQuery.expr.pseudos\");\n  migrateWarnProp(jQuery.expr, \":\", jQuery.expr.pseudos, \"jQuery.expr[\\\":\\\"] is now jQuery.expr.pseudos\");\n  var oldAjax = jQuery.ajax;\n\n  jQuery.ajax = function () {\n    var jQXHR = oldAjax.apply(this, arguments); // Be sure we got a jQXHR (e.g., not sync)\n\n    if (jQXHR.promise) {\n      migrateWarnProp(jQXHR, \"success\", jQXHR.done, \"jQXHR.success is deprecated and removed\");\n      migrateWarnProp(jQXHR, \"error\", jQXHR.fail, \"jQXHR.error is deprecated and removed\");\n      migrateWarnProp(jQXHR, \"complete\", jQXHR.always, \"jQXHR.complete is deprecated and removed\");\n    }\n\n    return jQXHR;\n  };\n\n  var oldRemoveAttr = jQuery.fn.removeAttr,\n      oldToggleClass = jQuery.fn.toggleClass,\n      rmatchNonSpace = /\\S+/g;\n\n  jQuery.fn.removeAttr = function (name) {\n    var self = this;\n    jQuery.each(name.match(rmatchNonSpace), function (i, attr) {\n      if (jQuery.expr.match.bool.test(attr)) {\n        migrateWarn(\"jQuery.fn.removeAttr no longer sets boolean properties: \" + attr);\n        self.prop(attr, false);\n      }\n    });\n    return oldRemoveAttr.apply(this, arguments);\n  };\n\n  jQuery.fn.toggleClass = function (state) {\n    // Only deprecating no-args or single boolean arg\n    if (state !== undefined && typeof state !== \"boolean\") {\n      return oldToggleClass.apply(this, arguments);\n    }\n\n    migrateWarn(\"jQuery.fn.toggleClass( boolean ) is deprecated\"); // Toggle entire class name of each element\n\n    return this.each(function () {\n      var className = this.getAttribute && this.getAttribute(\"class\") || \"\";\n\n      if (className) {\n        jQuery.data(this, \"__className__\", className);\n      } // If the element has a class name or if we're passed `false`,\n      // then remove the whole classname (if there was one, the above saved it).\n      // Otherwise bring back whatever was previously saved (if anything),\n      // falling back to the empty string if nothing was stored.\n\n\n      if (this.setAttribute) {\n        this.setAttribute(\"class\", className || state === false ? \"\" : jQuery.data(this, \"__className__\") || \"\");\n      }\n    });\n  };\n\n  var internalSwapCall = false; // If this version of jQuery has .swap(), don't false-alarm on internal uses\n\n  if (jQuery.swap) {\n    jQuery.each([\"height\", \"width\", \"reliableMarginRight\"], function (_, name) {\n      var oldHook = jQuery.cssHooks[name] && jQuery.cssHooks[name].get;\n\n      if (oldHook) {\n        jQuery.cssHooks[name].get = function () {\n          var ret;\n          internalSwapCall = true;\n          ret = oldHook.apply(this, arguments);\n          internalSwapCall = false;\n          return ret;\n        };\n      }\n    });\n  }\n\n  jQuery.swap = function (elem, options, callback, args) {\n    var ret,\n        name,\n        old = {};\n\n    if (!internalSwapCall) {\n      migrateWarn(\"jQuery.swap() is undocumented and deprecated\");\n    } // Remember the old values, and insert the new ones\n\n\n    for (name in options) {\n      old[name] = elem.style[name];\n      elem.style[name] = options[name];\n    }\n\n    ret = callback.apply(elem, args || []); // Revert the old values\n\n    for (name in options) {\n      elem.style[name] = old[name];\n    }\n\n    return ret;\n  };\n\n  var oldData = jQuery.data;\n\n  jQuery.data = function (elem, name, value) {\n    var curData; // If the name is transformed, look for the un-transformed name in the data object\n\n    if (name && name !== jQuery.camelCase(name)) {\n      curData = jQuery.hasData(elem) && oldData.call(this, elem);\n\n      if (curData && name in curData) {\n        migrateWarn(\"jQuery.data() always sets/gets camelCased names: \" + name);\n\n        if (arguments.length > 2) {\n          curData[name] = value;\n        }\n\n        return curData[name];\n      }\n    }\n\n    return oldData.apply(this, arguments);\n  };\n\n  var oldTweenRun = jQuery.Tween.prototype.run;\n\n  jQuery.Tween.prototype.run = function (percent) {\n    if (jQuery.easing[this.easing].length > 1) {\n      migrateWarn(\"easing function \" + \"\\\"jQuery.easing.\" + this.easing.toString() + \"\\\" should use only first argument\");\n      jQuery.easing[this.easing] = jQuery.easing[this.easing].bind(jQuery.easing, percent, this.options.duration * percent, 0, 1, this.options.duration);\n    }\n\n    oldTweenRun.apply(this, arguments);\n  };\n\n  var oldLoad = jQuery.fn.load,\n      originalFix = jQuery.event.fix;\n  jQuery.event.props = [];\n  jQuery.event.fixHooks = {};\n\n  jQuery.event.fix = function (originalEvent) {\n    var event,\n        type = originalEvent.type,\n        fixHook = this.fixHooks[type],\n        props = jQuery.event.props;\n\n    if (props.length) {\n      migrateWarn(\"jQuery.event.props are deprecated and removed: \" + props.join());\n\n      while (props.length) {\n        jQuery.event.addProp(props.pop());\n      }\n    }\n\n    if (fixHook && !fixHook._migrated_) {\n      fixHook._migrated_ = true;\n      migrateWarn(\"jQuery.event.fixHooks are deprecated and removed: \" + type);\n\n      if ((props = fixHook.props) && props.length) {\n        while (props.length) {\n          jQuery.event.addProp(props.pop());\n        }\n      }\n    }\n\n    event = originalFix.call(this, originalEvent);\n    return fixHook && fixHook.filter ? fixHook.filter(event, originalEvent) : event;\n  };\n\n  jQuery.each([\"load\", \"unload\", \"error\"], function (_, name) {\n    jQuery.fn[name] = function () {\n      var args = Array.prototype.slice.call(arguments, 0); // If this is an ajax load() the first arg should be the string URL;\n      // technically this could also be the \"Anything\" arg of the event .load()\n      // which just goes to show why this dumb signature has been deprecated!\n      // jQuery custom builds that exclude the Ajax module justifiably die here.\n\n      if (name === \"load\" && typeof args[0] === \"string\") {\n        return oldLoad.apply(this, args);\n      }\n\n      migrateWarn(\"jQuery.fn.\" + name + \"() is deprecated\");\n      args.splice(0, 0, name);\n\n      if (arguments.length) {\n        return this.on.apply(this, args);\n      } // Use .triggerHandler here because:\n      // - load and unload events don't need to bubble, only applied to window or image\n      // - error event should not bubble to window, although it does pre-1.7\n      // See http://bugs.jquery.com/ticket/11820\n\n\n      this.triggerHandler.apply(this, args);\n      return this;\n    };\n  }); // Trigger \"ready\" event only once, on document ready\n\n  jQuery(function () {\n    jQuery(document).triggerHandler(\"ready\");\n  });\n  jQuery.event.special.ready = {\n    setup: function setup() {\n      if (this === document) {\n        migrateWarn(\"'ready' event is deprecated\");\n      }\n    }\n  };\n  jQuery.fn.extend({\n    bind: function bind(types, data, fn) {\n      migrateWarn(\"jQuery.fn.bind() is deprecated\");\n      return this.on(types, null, data, fn);\n    },\n    unbind: function unbind(types, fn) {\n      migrateWarn(\"jQuery.fn.unbind() is deprecated\");\n      return this.off(types, null, fn);\n    },\n    delegate: function delegate(selector, types, data, fn) {\n      migrateWarn(\"jQuery.fn.delegate() is deprecated\");\n      return this.on(types, selector, data, fn);\n    },\n    undelegate: function undelegate(selector, types, fn) {\n      migrateWarn(\"jQuery.fn.undelegate() is deprecated\");\n      return arguments.length === 1 ? this.off(selector, \"**\") : this.off(types, selector || \"**\", fn);\n    }\n  });\n  var oldOffset = jQuery.fn.offset;\n\n  jQuery.fn.offset = function () {\n    var docElem,\n        elem = this[0],\n        origin = {\n      top: 0,\n      left: 0\n    };\n\n    if (!elem || !elem.nodeType) {\n      migrateWarn(\"jQuery.fn.offset() requires a valid DOM element\");\n      return origin;\n    }\n\n    docElem = (elem.ownerDocument || document).documentElement;\n\n    if (!jQuery.contains(docElem, elem)) {\n      migrateWarn(\"jQuery.fn.offset() requires an element connected to a document\");\n      return origin;\n    }\n\n    return oldOffset.apply(this, arguments);\n  };\n\n  var oldParam = jQuery.param;\n\n  jQuery.param = function (data, traditional) {\n    var ajaxTraditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\n\n    if (traditional === undefined && ajaxTraditional) {\n      migrateWarn(\"jQuery.param() no longer uses jQuery.ajaxSettings.traditional\");\n      traditional = ajaxTraditional;\n    }\n\n    return oldParam.call(this, data, traditional);\n  };\n\n  var oldSelf = jQuery.fn.andSelf || jQuery.fn.addBack;\n\n  jQuery.fn.andSelf = function () {\n    migrateWarn(\"jQuery.fn.andSelf() replaced by jQuery.fn.addBack()\");\n    return oldSelf.apply(this, arguments);\n  };\n\n  var oldDeferred = jQuery.Deferred,\n      tuples = [// Action, add listener, callbacks, .then handlers, final state\n  [\"resolve\", \"done\", jQuery.Callbacks(\"once memory\"), jQuery.Callbacks(\"once memory\"), \"resolved\"], [\"reject\", \"fail\", jQuery.Callbacks(\"once memory\"), jQuery.Callbacks(\"once memory\"), \"rejected\"], [\"notify\", \"progress\", jQuery.Callbacks(\"memory\"), jQuery.Callbacks(\"memory\")]];\n\n  jQuery.Deferred = function (func) {\n    var deferred = oldDeferred(),\n        promise = deferred.promise();\n\n    deferred.pipe = promise.pipe = function\n      /* fnDone, fnFail, fnProgress */\n    () {\n      var fns = arguments;\n      migrateWarn(\"deferred.pipe() is deprecated\");\n      return jQuery.Deferred(function (newDefer) {\n        jQuery.each(tuples, function (i, tuple) {\n          var fn = jQuery.isFunction(fns[i]) && fns[i]; // Deferred.done(function() { bind to newDefer or newDefer.resolve })\n          // deferred.fail(function() { bind to newDefer or newDefer.reject })\n          // deferred.progress(function() { bind to newDefer or newDefer.notify })\n\n          deferred[tuple[1]](function () {\n            var returned = fn && fn.apply(this, arguments);\n\n            if (returned && jQuery.isFunction(returned.promise)) {\n              returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\n            } else {\n              newDefer[tuple[0] + \"With\"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);\n            }\n          });\n        });\n        fns = null;\n      }).promise();\n    };\n\n    if (func) {\n      func.call(deferred, deferred);\n    }\n\n    return deferred;\n  };\n})(jQuery, window);","map":null,"metadata":{},"sourceType":"module"}