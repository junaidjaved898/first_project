{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*!\n * jQuery Migrate - v3.4.0 - 2022-03-24T16:30Z\n * Copyright OpenJS Foundation and other contributors\n */\n(function (factory) {\n  \"use strict\";\n\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"jquery\"], function (jQuery) {\n      return factory(jQuery, window);\n    });\n  } else if ((typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) === \"object\" && module.exports) {\n    // Node/CommonJS\n    // eslint-disable-next-line no-undef\n    module.exports = factory(require(\"jquery\"), window);\n  } else {\n    // Browser globals\n    factory(jQuery, window);\n  }\n})(function (jQuery, window) {\n  \"use strict\";\n\n  jQuery.migrateVersion = \"3.4.0\"; // Returns 0 if v1 == v2, -1 if v1 < v2, 1 if v1 > v2\n\n  function compareVersions(v1, v2) {\n    var i,\n        rVersionParts = /^(\\d+)\\.(\\d+)\\.(\\d+)/,\n        v1p = rVersionParts.exec(v1) || [],\n        v2p = rVersionParts.exec(v2) || [];\n\n    for (i = 1; i <= 3; i++) {\n      if (+v1p[i] > +v2p[i]) {\n        return 1;\n      }\n\n      if (+v1p[i] < +v2p[i]) {\n        return -1;\n      }\n    }\n\n    return 0;\n  }\n\n  function jQueryVersionSince(version) {\n    return compareVersions(jQuery.fn.jquery, version) >= 0;\n  } // A map from disabled patch codes to `true`. This should really\n  // be a `Set` but those are unsupported in IE.\n\n\n  var disabledPatches = Object.create(null); // Don't apply patches for specified codes. Helpful for code bases\n  // where some Migrate warnings have been addressed and it's desirable\n  // to avoid needless patches or false positives.\n\n  jQuery.migrateDisablePatches = function () {\n    var i;\n\n    for (i = 0; i < arguments.length; i++) {\n      disabledPatches[arguments[i]] = true;\n    }\n  }; // Allow enabling patches disabled via `jQuery.migrateDisablePatches`.\n  // Helpful if you want to disable a patch only for some code that won't\n  // be updated soon to be able to focus on other warnings - and enable it\n  // immediately after such a call:\n  // ```js\n  // jQuery.migrateDisablePatches( \"workaroundA\" );\n  // elem.pluginViolatingWarningA( \"pluginMethod\" );\n  // jQuery.migrateEnablePatches( \"workaroundA\" );\n  // ```\n\n\n  jQuery.migrateEnablePatches = function () {\n    var i;\n\n    for (i = 0; i < arguments.length; i++) {\n      delete disabledPatches[arguments[i]];\n    }\n  };\n\n  jQuery.migrateIsPatchEnabled = function (patchCode) {\n    return !disabledPatches[patchCode];\n  };\n\n  (function () {\n    // Support: IE9 only\n    // IE9 only creates console object when dev tools are first opened\n    // IE9 console is a host object, callable but doesn't have .apply()\n    if (!window.console || !window.console.log) {\n      return;\n    } // Need jQuery 3.0.0+ and no older Migrate loaded\n\n\n    if (!jQuery || !jQueryVersionSince(\"3.0.0\")) {\n      window.console.log(\"JQMIGRATE: jQuery 3.0.0+ REQUIRED\");\n    }\n\n    if (jQuery.migrateWarnings) {\n      window.console.log(\"JQMIGRATE: Migrate plugin loaded multiple times\");\n    } // Show a message on the console so devs know we're active\n\n\n    window.console.log(\"JQMIGRATE: Migrate is installed\" + (jQuery.migrateMute ? \"\" : \" with logging active\") + \", version \" + jQuery.migrateVersion);\n  })();\n\n  var warnedAbout = {}; // By default each warning is only reported once.\n\n  jQuery.migrateDeduplicateWarnings = true; // List of warnings already given; public read only\n\n  jQuery.migrateWarnings = []; // Set to false to disable traces that appear with warnings\n\n  if (jQuery.migrateTrace === undefined) {\n    jQuery.migrateTrace = true;\n  } // Forget any warnings we've already given; public\n\n\n  jQuery.migrateReset = function () {\n    warnedAbout = {};\n    jQuery.migrateWarnings.length = 0;\n  };\n\n  function migrateWarn(code, msg) {\n    var console = window.console;\n\n    if (jQuery.migrateIsPatchEnabled(code) && (!jQuery.migrateDeduplicateWarnings || !warnedAbout[msg])) {\n      warnedAbout[msg] = true;\n      jQuery.migrateWarnings.push(msg + \" [\" + code + \"]\");\n\n      if (console && console.warn && !jQuery.migrateMute) {\n        console.warn(\"JQMIGRATE: \" + msg);\n\n        if (jQuery.migrateTrace && console.trace) {\n          console.trace();\n        }\n      }\n    }\n  }\n\n  function migrateWarnProp(obj, prop, value, code, msg) {\n    Object.defineProperty(obj, prop, {\n      configurable: true,\n      enumerable: true,\n      get: function get() {\n        migrateWarn(code, msg);\n        return value;\n      },\n      set: function set(newValue) {\n        migrateWarn(code, msg);\n        value = newValue;\n      }\n    });\n  }\n\n  function migrateWarnFuncInternal(obj, prop, newFunc, code, msg) {\n    var finalFunc,\n        origFunc = obj[prop];\n\n    obj[prop] = function () {\n      // If `msg` not provided, do not warn; more sophisticated warnings\n      // logic is most likely embedded in `newFunc`, in that case here\n      // we just care about the logic choosing the proper implementation\n      // based on whether the patch is disabled or not.\n      if (msg) {\n        migrateWarn(code, msg);\n      } // Since patches can be disabled & enabled dynamically, we\n      // need to decide which implementation to run on each invocation.\n\n\n      finalFunc = jQuery.migrateIsPatchEnabled(code) ? newFunc : // The function may not have existed originally so we need a fallback.\n      origFunc || jQuery.noop;\n      return finalFunc.apply(this, arguments);\n    };\n  }\n\n  function migratePatchAndWarnFunc(obj, prop, newFunc, code, msg) {\n    if (!msg) {\n      throw new Error(\"No warning message provided\");\n    }\n\n    return migrateWarnFuncInternal(obj, prop, newFunc, code, msg);\n  }\n\n  function migratePatchFunc(obj, prop, newFunc, code) {\n    return migrateWarnFuncInternal(obj, prop, newFunc, code);\n  }\n\n  if (window.document.compatMode === \"BackCompat\") {\n    // jQuery has never supported or tested Quirks Mode\n    migrateWarn(\"quirks\", \"jQuery is not compatible with Quirks Mode\");\n  }\n\n  var findProp,\n      class2type = {},\n      oldInit = jQuery.fn.init,\n      oldFind = jQuery.find,\n      rattrHashTest = /\\[(\\s*[-\\w]+\\s*)([~|^$*]?=)\\s*([-\\w#]*?#[-\\w#]*)\\s*\\]/,\n      rattrHashGlob = /\\[(\\s*[-\\w]+\\s*)([~|^$*]?=)\\s*([-\\w#]*?#[-\\w#]*)\\s*\\]/g,\n      // Support: Android <=4.0 only\n  // Make sure we trim BOM and NBSP\n  rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n  migratePatchFunc(jQuery.fn, \"init\", function (arg1) {\n    var args = Array.prototype.slice.call(arguments);\n\n    if (jQuery.migrateIsPatchEnabled(\"selector-empty-id\") && typeof arg1 === \"string\" && arg1 === \"#\") {\n      // JQuery( \"#\" ) is a bogus ID selector, but it returned an empty set\n      // before jQuery 3.0\n      migrateWarn(\"selector-empty-id\", \"jQuery( '#' ) is not a valid selector\");\n      args[0] = [];\n    }\n\n    return oldInit.apply(this, args);\n  }, \"selector-empty-id\"); // This is already done in Core but the above patch will lose this assignment\n  // so we need to redo it. It doesn't matter whether the patch is enabled or not\n  // as the method is always going to be a Migrate-created wrapper.\n\n  jQuery.fn.init.prototype = jQuery.fn;\n  migratePatchFunc(jQuery, \"find\", function (selector) {\n    var args = Array.prototype.slice.call(arguments); // Support: PhantomJS 1.x\n    // String#match fails to match when used with a //g RegExp, only on some strings\n\n    if (typeof selector === \"string\" && rattrHashTest.test(selector)) {\n      // The nonstandard and undocumented unquoted-hash was removed in jQuery 1.12.0\n      // First see if qS thinks it's a valid selector, if so avoid a false positive\n      try {\n        window.document.querySelector(selector);\n      } catch (err1) {\n        // Didn't *look* valid to qSA, warn and try quoting what we think is the value\n        selector = selector.replace(rattrHashGlob, function (_, attr, op, value) {\n          return \"[\" + attr + op + \"\\\"\" + value + \"\\\"]\";\n        }); // If the regexp *may* have created an invalid selector, don't update it\n        // Note that there may be false alarms if selector uses jQuery extensions\n\n        try {\n          window.document.querySelector(selector);\n          migrateWarn(\"selector-hash\", \"Attribute selector with '#' must be quoted: \" + args[0]);\n          args[0] = selector;\n        } catch (err2) {\n          migrateWarn(\"selector-hash\", \"Attribute selector with '#' was not fixed: \" + args[0]);\n        }\n      }\n    }\n\n    return oldFind.apply(this, args);\n  }, \"selector-hash\"); // Copy properties attached to original jQuery.find method (e.g. .attr, .isXML)\n\n  for (findProp in oldFind) {\n    if (Object.prototype.hasOwnProperty.call(oldFind, findProp)) {\n      jQuery.find[findProp] = oldFind[findProp];\n    }\n  } // The number of elements contained in the matched element set\n\n\n  migratePatchAndWarnFunc(jQuery.fn, \"size\", function () {\n    return this.length;\n  }, \"size\", \"jQuery.fn.size() is deprecated and removed; use the .length property\");\n  migratePatchAndWarnFunc(jQuery, \"parseJSON\", function () {\n    return JSON.parse.apply(null, arguments);\n  }, \"parseJSON\", \"jQuery.parseJSON is deprecated; use JSON.parse\");\n  migratePatchAndWarnFunc(jQuery, \"holdReady\", jQuery.holdReady, \"holdReady\", \"jQuery.holdReady is deprecated\");\n  migratePatchAndWarnFunc(jQuery, \"unique\", jQuery.uniqueSort, \"unique\", \"jQuery.unique is deprecated; use jQuery.uniqueSort\"); // Now jQuery.expr.pseudos is the standard incantation\n\n  migrateWarnProp(jQuery.expr, \"filters\", jQuery.expr.pseudos, \"expr-pre-pseudos\", \"jQuery.expr.filters is deprecated; use jQuery.expr.pseudos\");\n  migrateWarnProp(jQuery.expr, \":\", jQuery.expr.pseudos, \"expr-pre-pseudos\", \"jQuery.expr[':'] is deprecated; use jQuery.expr.pseudos\"); // Prior to jQuery 3.1.1 there were internal refs so we don't warn there\n\n  if (jQueryVersionSince(\"3.1.1\")) {\n    migratePatchAndWarnFunc(jQuery, \"trim\", function (text) {\n      return text == null ? \"\" : (text + \"\").replace(rtrim, \"\");\n    }, \"trim\", \"jQuery.trim is deprecated; use String.prototype.trim\");\n  } // Prior to jQuery 3.2 there were internal refs so we don't warn there\n\n\n  if (jQueryVersionSince(\"3.2.0\")) {\n    migratePatchAndWarnFunc(jQuery, \"nodeName\", function (elem, name) {\n      return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n    }, \"nodeName\", \"jQuery.nodeName is deprecated\");\n    migratePatchAndWarnFunc(jQuery, \"isArray\", Array.isArray, \"isArray\", \"jQuery.isArray is deprecated; use Array.isArray\");\n  }\n\n  if (jQueryVersionSince(\"3.3.0\")) {\n    migratePatchAndWarnFunc(jQuery, \"isNumeric\", function (obj) {\n      // As of jQuery 3.0, isNumeric is limited to\n      // strings and numbers (primitives or objects)\n      // that can be coerced to finite numbers (gh-2662)\n      var type = _typeof(obj);\n\n      return (type === \"number\" || type === \"string\") && // parseFloat NaNs numeric-cast false positives (\"\")\n      // ...but misinterprets leading-number strings, e.g. hex literals (\"0x...\")\n      // subtraction forces infinities to NaN\n      !isNaN(obj - parseFloat(obj));\n    }, \"isNumeric\", \"jQuery.isNumeric() is deprecated\"); // Populate the class2type map\n\n    jQuery.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"), function (_, name) {\n      class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\n    });\n    migratePatchAndWarnFunc(jQuery, \"type\", function (obj) {\n      if (obj == null) {\n        return obj + \"\";\n      } // Support: Android <=2.3 only (functionish RegExp)\n\n\n      return _typeof(obj) === \"object\" || typeof obj === \"function\" ? class2type[Object.prototype.toString.call(obj)] || \"object\" : _typeof(obj);\n    }, \"type\", \"jQuery.type is deprecated\");\n    migratePatchAndWarnFunc(jQuery, \"isFunction\", function (obj) {\n      return typeof obj === \"function\";\n    }, \"isFunction\", \"jQuery.isFunction() is deprecated\");\n    migratePatchAndWarnFunc(jQuery, \"isWindow\", function (obj) {\n      return obj != null && obj === obj.window;\n    }, \"isWindow\", \"jQuery.isWindow() is deprecated\");\n  } // Support jQuery slim which excludes the ajax module\n\n\n  if (jQuery.ajax) {\n    var oldAjax = jQuery.ajax,\n        rjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n    migratePatchFunc(jQuery, \"ajax\", function () {\n      var jQXHR = oldAjax.apply(this, arguments); // Be sure we got a jQXHR (e.g., not sync)\n\n      if (jQXHR.promise) {\n        migratePatchAndWarnFunc(jQXHR, \"success\", jQXHR.done, \"jqXHR-methods\", \"jQXHR.success is deprecated and removed\");\n        migratePatchAndWarnFunc(jQXHR, \"error\", jQXHR.fail, \"jqXHR-methods\", \"jQXHR.error is deprecated and removed\");\n        migratePatchAndWarnFunc(jQXHR, \"complete\", jQXHR.always, \"jqXHR-methods\", \"jQXHR.complete is deprecated and removed\");\n      }\n\n      return jQXHR;\n    }, \"jqXHR-methods\"); // Only trigger the logic in jQuery <4 as the JSON-to-JSONP auto-promotion\n    // behavior is gone in jQuery 4.0 and as it has security implications, we don't\n    // want to restore the legacy behavior.\n\n    if (!jQueryVersionSince(\"4.0.0\")) {\n      // Register this prefilter before the jQuery one. Otherwise, a promoted\n      // request is transformed into one with the script dataType and we can't\n      // catch it anymore.\n      jQuery.ajaxPrefilter(\"+json\", function (s) {\n        // Warn if JSON-to-JSONP auto-promotion happens.\n        if (s.jsonp !== false && (rjsonp.test(s.url) || typeof s.data === \"string\" && (s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") === 0 && rjsonp.test(s.data))) {\n          migrateWarn(\"jsonp-promotion\", \"JSON-to-JSONP auto-promotion is deprecated\");\n        }\n      });\n    }\n  }\n\n  var oldRemoveAttr = jQuery.fn.removeAttr,\n      oldToggleClass = jQuery.fn.toggleClass,\n      rmatchNonSpace = /\\S+/g;\n  migratePatchFunc(jQuery.fn, \"removeAttr\", function (name) {\n    var self = this;\n    jQuery.each(name.match(rmatchNonSpace), function (_i, attr) {\n      if (jQuery.expr.match.bool.test(attr)) {\n        migrateWarn(\"removeAttr-bool\", \"jQuery.fn.removeAttr no longer sets boolean properties: \" + attr);\n        self.prop(attr, false);\n      }\n    });\n    return oldRemoveAttr.apply(this, arguments);\n  }, \"removeAttr-bool\");\n  migratePatchFunc(jQuery.fn, \"toggleClass\", function (state) {\n    // Only deprecating no-args or single boolean arg\n    if (state !== undefined && typeof state !== \"boolean\") {\n      return oldToggleClass.apply(this, arguments);\n    }\n\n    migrateWarn(\"toggleClass-bool\", \"jQuery.fn.toggleClass( boolean ) is deprecated\"); // Toggle entire class name of each element\n\n    return this.each(function () {\n      var className = this.getAttribute && this.getAttribute(\"class\") || \"\";\n\n      if (className) {\n        jQuery.data(this, \"__className__\", className);\n      } // If the element has a class name or if we're passed `false`,\n      // then remove the whole classname (if there was one, the above saved it).\n      // Otherwise bring back whatever was previously saved (if anything),\n      // falling back to the empty string if nothing was stored.\n\n\n      if (this.setAttribute) {\n        this.setAttribute(\"class\", className || state === false ? \"\" : jQuery.data(this, \"__className__\") || \"\");\n      }\n    });\n  }, \"toggleClass-bool\");\n\n  function camelCase(string) {\n    return string.replace(/-([a-z])/g, function (_, letter) {\n      return letter.toUpperCase();\n    });\n  }\n\n  var origFnCss,\n      internalSwapCall = false,\n      ralphaStart = /^[a-z]/,\n      // The regex visualized:\n  //\n  //                         /----------\\\n  //                        |            |    /-------\\\n  //                        |  / Top  \\  |   |         |\n  //         /--- Border ---+-| Right  |-+---+- Width -+---\\\n  //        |                 | Bottom |                    |\n  //        |                  \\ Left /                     |\n  //        |                                               |\n  //        |                              /----------\\     |\n  //        |          /-------------\\    |            |    |- END\n  //        |         |               |   |  / Top  \\  |    |\n  //        |         |  / Margin  \\  |   | | Right  | |    |\n  //        |---------+-|           |-+---+-| Bottom |-+----|\n  //        |            \\ Padding /         \\ Left /       |\n  // BEGIN -|                                               |\n  //        |                /---------\\                    |\n  //        |               |           |                   |\n  //        |               |  / Min \\  |    / Width  \\     |\n  //         \\--------------+-|       |-+---|          |---/\n  //                           \\ Max /       \\ Height /\n  rautoPx = /^(?:Border(?:Top|Right|Bottom|Left)?(?:Width|)|(?:Margin|Padding)?(?:Top|Right|Bottom|Left)?|(?:Min|Max)?(?:Width|Height))$/; // If this version of jQuery has .swap(), don't false-alarm on internal uses\n\n  if (jQuery.swap) {\n    jQuery.each([\"height\", \"width\", \"reliableMarginRight\"], function (_, name) {\n      var oldHook = jQuery.cssHooks[name] && jQuery.cssHooks[name].get;\n\n      if (oldHook) {\n        jQuery.cssHooks[name].get = function () {\n          var ret;\n          internalSwapCall = true;\n          ret = oldHook.apply(this, arguments);\n          internalSwapCall = false;\n          return ret;\n        };\n      }\n    });\n  }\n\n  migratePatchFunc(jQuery, \"swap\", function (elem, options, callback, args) {\n    var ret,\n        name,\n        old = {};\n\n    if (!internalSwapCall) {\n      migrateWarn(\"swap\", \"jQuery.swap() is undocumented and deprecated\");\n    } // Remember the old values, and insert the new ones\n\n\n    for (name in options) {\n      old[name] = elem.style[name];\n      elem.style[name] = options[name];\n    }\n\n    ret = callback.apply(elem, args || []); // Revert the old values\n\n    for (name in options) {\n      elem.style[name] = old[name];\n    }\n\n    return ret;\n  }, \"swap\");\n\n  if (jQueryVersionSince(\"3.4.0\") && typeof Proxy !== \"undefined\") {\n    jQuery.cssProps = new Proxy(jQuery.cssProps || {}, {\n      set: function set() {\n        migrateWarn(\"cssProps\", \"jQuery.cssProps is deprecated\");\n        return Reflect.set.apply(this, arguments);\n      }\n    });\n  } // In jQuery >=4 where jQuery.cssNumber is missing fill it with the latest 3.x version:\n  // https://github.com/jquery/jquery/blob/3.6.0/src/css.js#L212-L233\n  // This way, number values for the CSS properties below won't start triggering\n  // Migrate warnings when jQuery gets updated to >=4.0.0 (gh-438).\n\n\n  if (jQueryVersionSince(\"4.0.0\") && typeof Proxy !== \"undefined\") {\n    jQuery.cssNumber = new Proxy({\n      animationIterationCount: true,\n      columnCount: true,\n      fillOpacity: true,\n      flexGrow: true,\n      flexShrink: true,\n      fontWeight: true,\n      gridArea: true,\n      gridColumn: true,\n      gridColumnEnd: true,\n      gridColumnStart: true,\n      gridRow: true,\n      gridRowEnd: true,\n      gridRowStart: true,\n      lineHeight: true,\n      opacity: true,\n      order: true,\n      orphans: true,\n      widows: true,\n      zIndex: true,\n      zoom: true\n    }, {\n      get: function get() {\n        migrateWarn(\"css-number\", \"jQuery.cssNumber is deprecated\");\n        return Reflect.get.apply(this, arguments);\n      },\n      set: function set() {\n        migrateWarn(\"css-number\", \"jQuery.cssNumber is deprecated\");\n        return Reflect.set.apply(this, arguments);\n      }\n    });\n  }\n\n  function isAutoPx(prop) {\n    // The first test is used to ensure that:\n    // 1. The prop starts with a lowercase letter (as we uppercase it for the second regex).\n    // 2. The prop is not empty.\n    return ralphaStart.test(prop) && rautoPx.test(prop[0].toUpperCase() + prop.slice(1));\n  }\n\n  origFnCss = jQuery.fn.css;\n  migratePatchFunc(jQuery.fn, \"css\", function (name, value) {\n    var camelName,\n        origThis = this;\n\n    if (name && _typeof(name) === \"object\" && !Array.isArray(name)) {\n      jQuery.each(name, function (n, v) {\n        jQuery.fn.css.call(origThis, n, v);\n      });\n      return this;\n    }\n\n    if (typeof value === \"number\") {\n      camelName = camelCase(name);\n\n      if (!isAutoPx(camelName) && !jQuery.cssNumber[camelName]) {\n        migrateWarn(\"css-number\", \"Number-typed values are deprecated for jQuery.fn.css( \\\"\" + name + \"\\\", value )\");\n      }\n    }\n\n    return origFnCss.apply(this, arguments);\n  }, \"css-number\");\n  var origData = jQuery.data;\n  migratePatchFunc(jQuery, \"data\", function (elem, name, value) {\n    var curData, sameKeys, key; // Name can be an object, and each entry in the object is meant to be set as data\n\n    if (name && _typeof(name) === \"object\" && arguments.length === 2) {\n      curData = jQuery.hasData(elem) && origData.call(this, elem);\n      sameKeys = {};\n\n      for (key in name) {\n        if (key !== camelCase(key)) {\n          migrateWarn(\"data-camelCase\", \"jQuery.data() always sets/gets camelCased names: \" + key);\n          curData[key] = name[key];\n        } else {\n          sameKeys[key] = name[key];\n        }\n      }\n\n      origData.call(this, elem, sameKeys);\n      return name;\n    } // If the name is transformed, look for the un-transformed name in the data object\n\n\n    if (name && typeof name === \"string\" && name !== camelCase(name)) {\n      curData = jQuery.hasData(elem) && origData.call(this, elem);\n\n      if (curData && name in curData) {\n        migrateWarn(\"data-camelCase\", \"jQuery.data() always sets/gets camelCased names: \" + name);\n\n        if (arguments.length > 2) {\n          curData[name] = value;\n        }\n\n        return curData[name];\n      }\n    }\n\n    return origData.apply(this, arguments);\n  }, \"data-camelCase\"); // Support jQuery slim which excludes the effects module\n\n  if (jQuery.fx) {\n    var intervalValue,\n        intervalMsg,\n        oldTweenRun = jQuery.Tween.prototype.run,\n        linearEasing = function linearEasing(pct) {\n      return pct;\n    };\n\n    migratePatchFunc(jQuery.Tween.prototype, \"run\", function () {\n      if (jQuery.easing[this.easing].length > 1) {\n        migrateWarn(\"easing-one-arg\", \"'jQuery.easing.\" + this.easing.toString() + \"' should use only one argument\");\n        jQuery.easing[this.easing] = linearEasing;\n      }\n\n      oldTweenRun.apply(this, arguments);\n    }, \"easing-one-arg\");\n    intervalValue = jQuery.fx.interval;\n    intervalMsg = \"jQuery.fx.interval is deprecated\"; // Support: IE9, Android <=4.4\n    // Avoid false positives on browsers that lack rAF\n    // Don't warn if document is hidden, jQuery uses setTimeout (#292)\n\n    if (window.requestAnimationFrame) {\n      Object.defineProperty(jQuery.fx, \"interval\", {\n        configurable: true,\n        enumerable: true,\n        get: function get() {\n          if (!window.document.hidden) {\n            migrateWarn(\"fx-interval\", intervalMsg);\n          } // Only fallback to the default if patch is enabled\n\n\n          if (!jQuery.migrateIsPatchEnabled(\"fx-interval\")) {\n            return intervalValue;\n          }\n\n          return intervalValue === undefined ? 13 : intervalValue;\n        },\n        set: function set(newValue) {\n          migrateWarn(\"fx-interval\", intervalMsg);\n          intervalValue = newValue;\n        }\n      });\n    }\n  }\n\n  var oldLoad = jQuery.fn.load,\n      oldEventAdd = jQuery.event.add,\n      originalFix = jQuery.event.fix;\n  jQuery.event.props = [];\n  jQuery.event.fixHooks = {};\n  migrateWarnProp(jQuery.event.props, \"concat\", jQuery.event.props.concat, \"event-old-patch\", \"jQuery.event.props.concat() is deprecated and removed\");\n  migratePatchFunc(jQuery.event, \"fix\", function (originalEvent) {\n    var event,\n        type = originalEvent.type,\n        fixHook = this.fixHooks[type],\n        props = jQuery.event.props;\n\n    if (props.length) {\n      migrateWarn(\"event-old-patch\", \"jQuery.event.props are deprecated and removed: \" + props.join());\n\n      while (props.length) {\n        jQuery.event.addProp(props.pop());\n      }\n    }\n\n    if (fixHook && !fixHook._migrated_) {\n      fixHook._migrated_ = true;\n      migrateWarn(\"event-old-patch\", \"jQuery.event.fixHooks are deprecated and removed: \" + type);\n\n      if ((props = fixHook.props) && props.length) {\n        while (props.length) {\n          jQuery.event.addProp(props.pop());\n        }\n      }\n    }\n\n    event = originalFix.call(this, originalEvent);\n    return fixHook && fixHook.filter ? fixHook.filter(event, originalEvent) : event;\n  }, \"event-old-patch\");\n  migratePatchFunc(jQuery.event, \"add\", function (elem, types) {\n    // This misses the multiple-types case but that seems awfully rare\n    if (elem === window && types === \"load\" && window.document.readyState === \"complete\") {\n      migrateWarn(\"load-after-event\", \"jQuery(window).on('load'...) called after load event occurred\");\n    }\n\n    return oldEventAdd.apply(this, arguments);\n  }, \"load-after-event\");\n  jQuery.each([\"load\", \"unload\", \"error\"], function (_, name) {\n    migratePatchFunc(jQuery.fn, name, function () {\n      var args = Array.prototype.slice.call(arguments, 0); // If this is an ajax load() the first arg should be the string URL;\n      // technically this could also be the \"Anything\" arg of the event .load()\n      // which just goes to show why this dumb signature has been deprecated!\n      // jQuery custom builds that exclude the Ajax module justifiably die here.\n\n      if (name === \"load\" && typeof args[0] === \"string\") {\n        return oldLoad.apply(this, args);\n      }\n\n      migrateWarn(\"shorthand-removed-v3\", \"jQuery.fn.\" + name + \"() is deprecated\");\n      args.splice(0, 0, name);\n\n      if (arguments.length) {\n        return this.on.apply(this, args);\n      } // Use .triggerHandler here because:\n      // - load and unload events don't need to bubble, only applied to window or image\n      // - error event should not bubble to window, although it does pre-1.7\n      // See http://bugs.jquery.com/ticket/11820\n\n\n      this.triggerHandler.apply(this, args);\n      return this;\n    }, \"shorthand-removed-v3\");\n  });\n  jQuery.each((\"blur focus focusin focusout resize scroll click dblclick \" + \"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" + \"change select submit keydown keypress keyup contextmenu\").split(\" \"), function (_i, name) {\n    // Handle event binding\n    migratePatchAndWarnFunc(jQuery.fn, name, function (data, fn) {\n      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n    }, \"shorthand-deprecated-v3\", \"jQuery.fn.\" + name + \"() event shorthand is deprecated\");\n  }); // Trigger \"ready\" event only once, on document ready\n\n  jQuery(function () {\n    jQuery(window.document).triggerHandler(\"ready\");\n  });\n  jQuery.event.special.ready = {\n    setup: function setup() {\n      if (this === window.document) {\n        migrateWarn(\"ready-event\", \"'ready' event is deprecated\");\n      }\n    }\n  };\n  migratePatchAndWarnFunc(jQuery.fn, \"bind\", function (types, data, fn) {\n    return this.on(types, null, data, fn);\n  }, \"pre-on-methods\", \"jQuery.fn.bind() is deprecated\");\n  migratePatchAndWarnFunc(jQuery.fn, \"unbind\", function (types, fn) {\n    return this.off(types, null, fn);\n  }, \"pre-on-methods\", \"jQuery.fn.unbind() is deprecated\");\n  migratePatchAndWarnFunc(jQuery.fn, \"delegate\", function (selector, types, data, fn) {\n    return this.on(types, selector, data, fn);\n  }, \"pre-on-methods\", \"jQuery.fn.delegate() is deprecated\");\n  migratePatchAndWarnFunc(jQuery.fn, \"undelegate\", function (selector, types, fn) {\n    return arguments.length === 1 ? this.off(selector, \"**\") : this.off(types, selector || \"**\", fn);\n  }, \"pre-on-methods\", \"jQuery.fn.undelegate() is deprecated\");\n  migratePatchAndWarnFunc(jQuery.fn, \"hover\", function (fnOver, fnOut) {\n    return this.on(\"mouseenter\", fnOver).on(\"mouseleave\", fnOut || fnOver);\n  }, \"pre-on-methods\", \"jQuery.fn.hover() is deprecated\");\n\n  var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n      makeMarkup = function makeMarkup(html) {\n    var doc = window.document.implementation.createHTMLDocument(\"\");\n    doc.body.innerHTML = html;\n    return doc.body && doc.body.innerHTML;\n  },\n      warnIfChanged = function warnIfChanged(html) {\n    var changed = html.replace(rxhtmlTag, \"<$1></$2>\");\n\n    if (changed !== html && makeMarkup(html) !== makeMarkup(changed)) {\n      migrateWarn(\"self-closed-tags\", \"HTML tags must be properly nested and closed: \" + html);\n    }\n  };\n  /**\n   * Deprecated, please use `jQuery.migrateDisablePatches( \"self-closed-tags\" )` instead.\n   * @deprecated\n   */\n\n\n  jQuery.UNSAFE_restoreLegacyHtmlPrefilter = function () {\n    jQuery.migrateEnablePatches(\"self-closed-tags\");\n  };\n\n  migratePatchFunc(jQuery, \"htmlPrefilter\", function (html) {\n    warnIfChanged(html);\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n  }, \"self-closed-tags\"); // This patch needs to be disabled by default as it re-introduces\n  // security issues (CVE-2020-11022, CVE-2020-11023).\n\n  jQuery.migrateDisablePatches(\"self-closed-tags\");\n  var origOffset = jQuery.fn.offset;\n  migratePatchFunc(jQuery.fn, \"offset\", function () {\n    var elem = this[0];\n\n    if (elem && (!elem.nodeType || !elem.getBoundingClientRect)) {\n      migrateWarn(\"offset-valid-elem\", \"jQuery.fn.offset() requires a valid DOM element\");\n      return arguments.length ? this : undefined;\n    }\n\n    return origOffset.apply(this, arguments);\n  }, \"offset-valid-elem\"); // Support jQuery slim which excludes the ajax module\n  // The jQuery.param patch is about respecting `jQuery.ajaxSettings.traditional`\n  // so it doesn't make sense for the slim build.\n\n  if (jQuery.ajax) {\n    var origParam = jQuery.param;\n    migratePatchFunc(jQuery, \"param\", function (data, traditional) {\n      var ajaxTraditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\n\n      if (traditional === undefined && ajaxTraditional) {\n        migrateWarn(\"param-ajax-traditional\", \"jQuery.param() no longer uses jQuery.ajaxSettings.traditional\");\n        traditional = ajaxTraditional;\n      }\n\n      return origParam.call(this, data, traditional);\n    }, \"param-ajax-traditional\");\n  }\n\n  migratePatchAndWarnFunc(jQuery.fn, \"andSelf\", jQuery.fn.addBack, \"andSelf\", \"jQuery.fn.andSelf() is deprecated and removed, use jQuery.fn.addBack()\"); // Support jQuery slim which excludes the deferred module in jQuery 4.0+\n\n  if (jQuery.Deferred) {\n    var oldDeferred = jQuery.Deferred,\n        tuples = [// Action, add listener, callbacks, .then handlers, final state\n    [\"resolve\", \"done\", jQuery.Callbacks(\"once memory\"), jQuery.Callbacks(\"once memory\"), \"resolved\"], [\"reject\", \"fail\", jQuery.Callbacks(\"once memory\"), jQuery.Callbacks(\"once memory\"), \"rejected\"], [\"notify\", \"progress\", jQuery.Callbacks(\"memory\"), jQuery.Callbacks(\"memory\")]];\n    migratePatchFunc(jQuery, \"Deferred\", function (func) {\n      var deferred = oldDeferred(),\n          promise = deferred.promise();\n\n      function\n        /* fnDone, fnFail, fnProgress */\n      newDeferredPipe() {\n        var fns = arguments;\n        return jQuery.Deferred(function (newDefer) {\n          jQuery.each(tuples, function (i, tuple) {\n            var fn = typeof fns[i] === \"function\" && fns[i]; // Deferred.done(function() { bind to newDefer or newDefer.resolve })\n            // deferred.fail(function() { bind to newDefer or newDefer.reject })\n            // deferred.progress(function() { bind to newDefer or newDefer.notify })\n\n            deferred[tuple[1]](function () {\n              var returned = fn && fn.apply(this, arguments);\n\n              if (returned && typeof returned.promise === \"function\") {\n                returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\n              } else {\n                newDefer[tuple[0] + \"With\"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);\n              }\n            });\n          });\n          fns = null;\n        }).promise();\n      }\n\n      migratePatchAndWarnFunc(deferred, \"pipe\", newDeferredPipe, \"deferred-pipe\", \"deferred.pipe() is deprecated\");\n      migratePatchAndWarnFunc(promise, \"pipe\", newDeferredPipe, \"deferred-pipe\", \"deferred.pipe() is deprecated\");\n\n      if (func) {\n        func.call(deferred, deferred);\n      }\n\n      return deferred;\n    }, \"deferred-pipe\"); // Preserve handler of uncaught exceptions in promise chains\n\n    jQuery.Deferred.exceptionHook = oldDeferred.exceptionHook;\n  }\n\n  return jQuery;\n});","map":null,"metadata":{},"sourceType":"module"}